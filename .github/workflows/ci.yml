name: CI Pipeline

on:
  push:
    branches:
      - testing

jobs:
  # Job 1: Run tests and linting for all backend services
  test_and_lint_backends:
    runs-on: ubuntu-latest # Use a GitHub-hosted runner

    services:
      # Product DB container
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        # Make pg_isready available so the service is healthy before tests run
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      # Order DB
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. Checkout the repository code to the runner
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      # 2. Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: '3.10'

      # 3. Install dependencies and run code quality checkss
      - name: Install dependencies
        run: | # Use a multi-line script to install pip dependencies
          pip install --upgrade pip
          # Loop through each backend service folder
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          # Install CI tools
          pip install pytest httpx

      # 5. Run tests for product service
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q
      
      # 6. Run tests for order service
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test_and_lint_backends]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push product_service image
        working-directory: backend/product_service
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/product-service:${{ github.sha }} .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/product-service:${{ github.sha }}

      - name: Build and push order_service image
        working-directory: backend/order_service
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/order-service:${{ github.sha }} .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/order-service:${{ github.sha }}

      - name: Build and push customer_service image
        working-directory: backend/customer_service
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/customer-service:${{ github.sha }} .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/customer-service:${{ github.sha }}

      - name: Build and push frontend image
        working-directory: frontend
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}