name: Multi-Stage Deployment

on:
  workflow_run:
    workflows:
      - CI Pipeline
    types:
      - completed

jobs:
  azure_login:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

  # Job 1: Deploy to Staging Environment (runs only if image build and push succeed)
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: azure_login

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Update Azure CLI
        run: az upgrade --yes

      - name: Set Kubernetes Context for Staging
        run: |
          az aks get-credentials --resource-group ${{ secrets.STAGING_RESOURCE_GROUP }} --name ${{ secrets.STAGING_AKS_CLUSTER }} --overwrite-existing

      - name: Substitute ACR in YAML
        run: |
          export ACR=${{ secrets.AZURE_CONTAINER_REGISTRY }}
          envsubst < k8s/product-service.yaml > k8s/product-service-substituted.yaml
          envsubst < k8s/order-service.yaml > k8s/order-service-substituted.yaml
          envsubst < k8s/customer-service.yaml > k8s/customer-service-substituted.yaml

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy Backend Microservices (Product, Order, Customer ) to Stagging
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service-substituted.yaml
          kubectl apply -f order-service-substituted.yaml
          kubectl apply -f customer-service-substituted.yaml

      # Build and Push Docker image for Frontend
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest ./frontend/
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest

      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}
      - name: Substitute ACR in YAML
        run: |
          export ACR=${{ secrets.AZURE_CONTAINER_REGISTRY }}
          envsubst < k8s/frontend.yaml > k8s/frontend-substituted.yaml
      - name: Deploy Frontend to AKS
        run: |
          echo "Deploying frontend with latest tag to AKS cluster: ${{ inputs.aks_cluster_name }}"
          cd k8s/
          # Ensure frontend-service.yaml is configured with your ACR
          kubectl apply -f frontend-substituted.yaml

      - name: Wait for Manual Testing
        run: echo "Pausing for 5 minutes..."; sleep 300

      - name: Destroy Staging Environment
        run: |
          kubectl delete -f task10_2d/k8s/order-service.yaml
          kubectl delete -f task10_2d/k8s/product-service.yaml
          kubectl delete -f task10_2d/k8s/customer-service.yaml

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Kubernetes Context for Production
        run: |
          az aks get-credentials --resource-group ${{ inputs.PRODUCTION_RESOURCE_GROUP }} --name ${{ inputs.PRODUCTION_AKS_CLUSTER }} --overwrite-existing

      - name: Deploy to Production
        run: |
          kubectl apply -f week05/k8s/order-service.yaml
          kubectl apply -f week05/k8s/product-service.yaml
          kubectl apply -f week05/k8s/customer-service.yaml

      - name: Monitor Deployment
        run: |
          kubectl get pods --namespace default
          kubectl get services --namespace default
